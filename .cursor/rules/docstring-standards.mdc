---
description: PEP 257 compliance
globs:
alwaysApply: true
---
Docstring Standards Rule

Overview
This rule enforces PEP 257 compliance and Google-style docstrings throughout the codebase. All functions, classes, and modules will have proper docstrings following these standards.

Core Requirements

1. PEP 257 Compliance
- Module docstrings: Every Python file will start with a module-level docstring
- Function docstrings: All public functions will have docstrings
- Class docstrings: All classes will have docstrings
- Method docstrings: All public methods will have docstrings

2. Google Style Docstrings
Use Google-style docstring format for all docstrings:

def function_name(param1: str, param2: int) -> bool:
    """Short description of what the function does.

    Longer description if needed, explaining the purpose, behavior,
    and any important implementation details.

    Args:
        param1: Description of the first parameter.
        param2: Description of the second parameter.

    Returns:
        Description of what is returned.

    Raises:
        ValueError: When something goes wrong.
        TypeError: When wrong type is passed.

    Example:
        >>> function_name("test", 42)
        True
    """
    pass

3. Module Header Standards
Every Python file will start with this header format:

"""
Module description.

This module provides functionality for...
"""

1. Exceptions to Docstring Requirements
Small or obvious functions/classes may omit docstrings if:
- The function name is self-explanatory
- The function is a simple getter/setter
- The function is a simple property wrapper
- The class is a simple data container with obvious purpose

1. When Adding New Code
- Always include proper docstrings for new functions, classes, and methods
- Follow Google style format exactly
- Include type hints in docstrings
- Add examples for complex functions
- Document all parameters, return values, and exceptions

1. When Updating Existing Code
- Add docstrings to any undocumented public functions/classes
- Update docstrings to match current implementation
- Ensure docstrings reflect actual parameter types and return values
- Fix any outdated examples or descriptions

Quality Standards

Content Quality
- Accuracy: Docstrings will match actual implementation
- Completeness: Cover all parameters, returns, and exceptions
- Clarity: Use clear, concise language
- Examples: Include examples for complex functionality
- Type Information: Document expected types clearly

Format Quality
- Consistency: Use Google style consistently
- Indentation: Proper indentation for multi-line docstrings
- Spacing: Consistent spacing around docstring sections
- Grammar: Proper English grammar and punctuation

Common Patterns

Simple Function
def get_user_id() -> str:
    """Get the current user's ID.

    Returns:
        The user ID as a string.
    """
    return current_user.id

Complex Function
async def fetch_data(
    url: str,
    timeout: int = 30,
    retries: int = 3
) -> Dict[str, Any]:
    """Fetch data from a remote URL with retry logic.

    Attempts to fetch data from the specified URL, with configurable
    timeout and retry settings. Uses exponential backoff for retries.

    Args:
        url: The URL to fetch data from.
        timeout: Request timeout in seconds. Defaults to 30.
        retries: Number of retry attempts. Defaults to 3.

    Returns:
        Dictionary containing the fetched data and metadata.

    Raises:
        httpx.TimeoutException: When request times out.
        httpx.HTTPStatusError: When server returns error status.
        ValueError: When URL is invalid or empty.

    Example:
        >>> data = await fetch_data("https://api.example.com/data")
        >>> print(data["status"])
        'success'
    """
    pass

Class Docstring
class DataProcessor:
    """Process and transform data according to configured rules.

    This class provides a flexible framework for processing data
    through a series of configurable transformation steps. It supports
    both synchronous and asynchronous processing modes.

    Attributes:
        rules: List of processing rules to apply.
        cache: Optional cache for storing intermediate results.
        max_workers: Maximum number of worker threads/processes.
    """

    def __init__(self, rules: List[Rule], cache: Optional[Cache] = None):
        """Initialize the data processor.

        Args:
            rules: List of processing rules to apply.
            cache: Optional cache instance for storing results.
        """
        self.rules = rules
        self.cache = cache

Verification Checklist

Before committing code changes, verify:

- All new functions/classes have proper docstrings
- Docstrings follow Google style format
- All parameters are documented
- Return values are documented
- Exceptions are documented
- Examples are included for complex functions
- Module headers include author and copyright
- Docstrings match actual implementation
- No obvious functions are missing docstrings

Tools and Enforcement

- Use make lint to check for docstring compliance
- Use make format to auto-format code
- Use make all-checks to run all quality checks
- Docstring compliance is enforced by ruff and mypy

Remember: Good docstrings make code self-documenting and easier to maintain. Always prioritize clarity and completeness over brevity.
