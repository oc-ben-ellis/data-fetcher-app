[tool.poetry]
name = "data-fetcher"
version = "0.1.0"
description = "A composable, streaming-first fetch framework"
authors = ["Ben Ellis <ben.ellis@opencorporates.com>"]
readme = "README.md"
packages = [{include = "oc_fetcher"}]

[tool.poetry.dependencies]
python = "^3.10"
httpx = "^0.25.0"
asyncssh = "^2.13.0"
paramiko = "^3.4.0"
pysftp = "^0.2.9"
warcio = "^1.7.4"
boto3 = "^1.34.0"
redis = "^5.0.0"
aiofiles = "^23.0.0"
structlog = "^23.2.0"
aiohttp = "^3.12.15"
cairosvg = "^2.8.2"

[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
ruff = "^0.12.0"
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-timeout = "^2.1.0"
pytest-xdist = "^3.3.0"
mypy = "^1.5.0"
coverage = "^7.0.0"
testcontainers = "^3.7.0"
types-aiofiles = "^24.1.0.20250822"
types-boto3 = "^1.40.19"
types-botocore = "^1.0.2"
markdown = "^3.5.0"
jinja2 = "^3.1.0"
pygments = "^2.17.0"
pre-commit = "^3.5.0"
types-flask = "^1.1.6"
types-Markdown = "^3.5.0"
types-Pygments = "^2.17.0"
types-requests = "^2.32.4.20250809"
types-pysftp = "^0.2.17.20250805"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | tmp
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    "build",
    "dist",
    "tmp",
]

# see https://opencorporates.atlassian.net/wiki/spaces/ENGINEERIN/pages/382337032/Platform+ADR+002+004+Baseline+Linting+Type-Checking
[tool.ruff.lint]
select = [
  "A", # A: flake8-builtins
  "ANN", # ANN: flake8-annotations
  "ARG", # ARG: flake8-unusedargs
  "B", # B: flake8-bugbear
  "BLE", # BLE: flake8-blind-except
  "C4", # C4:  flake8-comprehensions
  "C90", # C90: McCabe Complexity
  "COM", # COM: flake8-commas
  "D", # D: pydocstyle
  "DTZ", # DTZ: flake8-datetimez
  "ERA", # ERA: eradicate
  "F", # F: pyflakes
  "FBT", # FBT: flake8-boolean-trap
  "G", # G: flake8-logging-format
  "I", # I: isort
  "ICN", # ICN: flake8-import-conventions
  "INP", # INP: flake8-no-pep420
  "INT", # INT: flake8-gettext
  "ISC", # ISC: flake8-implicit-str-concat
  "N", # N: pep8-naming
  "NPY", # NPY: NumPy-specific rules
  "PD", # PD:: pandas-vet
  "PGH", # PGH: pygrep-hooks
  "PIE", # PIE: flake8-pie
  "PL", # PLC: Pylint
  "PT", # PT: flake8-pytest-style
  "PTH", # PTH: flake8-use-pathlib
  "PYI", # PYI: flake8-PYI
  "Q", # Q: flake8-quotes
  "RET", # RET: flake8-return
  "RSE", # RSE: flake8-raise
  "RUF", # RUF: Ruff-specific rules
  "S", # S: flake8-bandit
  "SIM", # SIM: flake8-simplify
  "SLF", # SLF: flake8-self
  "T20", # T20: flake8-print
  "TC", # TCH: flake8-type-checking
  "TID", # TID: flake8-tidy-imports
  "TRY", # TRY: tryceratops
  "UP", # UP: PyUpgrade
  "W", # W: pycodestyles Warnings

]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "D1", # D1* (undocumented) ignored for service code.
    "PYI014", # PYI014 PYI015 ignored due to breaking mypy attrs support.
    "PYI015",
    "Q000", # Q000 Q001 Q002 ignored as conflicts with black quotes formatting.
    "Q001",
    "Q002",
    "PLR0913", # PLR0913 ignored because keyword arguments exist.
    "COM812", # COM812 ignored due to conflicts with black formatting.
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double" # Like Black, use double quotes for strings.
indent-style = "space" # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto" # Like Black, auto-detect the appropriate line ending.
docstring-code-format = false # auto-format code examples in docstrings
docstring-code-line-length = "dynamic" # use dynamic line length for code examples in docstrings.

[tool.mypy]
strict = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/stubs:$MYPY_CONFIG_FILE_DIR/test"

# Suppress verbose notes about type inference
show_error_codes = true
show_column_numbers = false

# General settings
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Exclude directories
exclude = [
    "tmp",
]

# Ignore missing imports for boto3 to reduce verbose output
[[tool.mypy.overrides]]
module = "boto3.*"
ignore_missing_imports = true
ignore_errors = true

[[tool.mypy.overrides]]
module = "botocore.*"
ignore_missing_imports = true
ignore_errors = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 300
addopts = [
    "--strict-markers",
    "-n", "auto",
    "--tb=short",
    "-W", "ignore::RuntimeWarning:unittest.mock.*",
]
markers = [
    "asyncio: mark test as async",
    "localstack: mark test as requiring localstack container",
    "integration: mark test as integration test",
    "slow: mark test as slow running",
]

[tool.poetry.scripts]
build-docs = "scripts.build_docs:main"
